#!/usr/bin/env python
import argparse
import asyncio
import logging
import sys
from pathlib import Path
from enum import Enum

from msgparse.parser import parse_message
from msgparse.server import runserver
from msgparse.utils import immutable

LOG = logging.getLogger('msgparse')

# Valid python version range [start,end)
VERSION_MIN = (3, 4, 4)
VERSION_MAX = (3, 5, 0)

KiB = 2 ** 10


class Error(Enum):
    def __init__(self, code, message):
        self.code = code
        self.message = message

    def __str__(self):
        return repr(self)

    def __repr__(self):
        return '<Error({}, {})>'.format(self.code, self.message)

    none = (0, 'Ok')
    bad_pyversion = (1, 'Invalid Python Version')
    fault = (2, 'Unhandled runtime fault')


if not (VERSION_MIN <= sys.version_info < VERSION_MAX):
    print(Error.bad_pyversion)
    raise SystemExit(Error.code)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Extract special symbols from a message',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='Turn on debug logging')

    parser.add_argument('-x', '--extreme', action='store_true', default=False,
                        help='Turn the parsing limits up to 11 '
                        '(msg size: 1GiB, url count: 1M)')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-c', '--content', nargs='+',
                       help='Parse a list of \" encased strings where each string '
                       'is interpreted as a message')
    group.add_argument('-f', '--file', type=lambda f: Path(f), dest='path',
                       help='Parse the contents of a file where each line '
                       'is parsed one message')
    group.add_argument('-s', '--server', action='store_true', default=False,
                       help='Run the parser as a unix socket TCP server')

    return parser.parse_args()

#: Arbitrary but reasonable from my experience.
DEFAULTS = immutable('DefaultConfig', max_urls=10, max_size=4 * KiB)


def run(args, ctx, config):

    if args.server:
        runserver(ctx, max_size=config.max_size, max_urls=config.max_urls)

    elif args.path is not None:
        with args.path.open('r') as msg_file:
            for msg in msg_file:
                content = msg[:config.max_size]
                parser = parse_message(ctx, content, max_urls=config.max_urls)
                result = ctx.loop.run_until_complete(parser)
                print(result)

    else:
        for raw_content in args.content:
            content = raw_content[:config.max_size]
            parser = parse_message(ctx, content)
            result = ctx.loop.run_until_complete(parser)
            print(result)


def main():

    args = parse_arguments()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.extreme:
        config = immutable('ExtremeConfig',
                           max_size=KiB * KiB * KiB,
                           max_urls=10 ** 6)
    else:
        config = DEFAULTS

    LOG.debug('Initializing asyncio event loop')
    ctx = immutable('Context', loop=asyncio.get_event_loop())
    exit_code = Error.none

    try:
        run(args, ctx, config)
    except Exception as e:
        LOG.exception('Unhandled exception')
        exit_code = Error.fault

    LOG.debug('Stopping asyncio event loop')
    ctx.loop.stop()
    ctx.loop.close()

    if exit_code.code == 0:
        LOG.debug('Exit: %s', exit_code)
    else:
        LOG.error('Exit: %s', exit_code)

    raise SystemExit(exit_code.code)


if __name__ == '__main__':
    # OS ambivalent entry point
    main()
